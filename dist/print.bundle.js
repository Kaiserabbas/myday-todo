"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmyday_todo"] = self["webpackChunkmyday_todo"] || []).push([["print"],{

/***/ "./src/modules/elements.js":
/*!*********************************!*\
  !*** ./src/modules/elements.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Task: () => (/* binding */ Task),\n/* harmony export */   addTasks: () => (/* binding */ addTasks),\n/* harmony export */   headerText: () => (/* binding */ headerText),\n/* harmony export */   inputForm: () => (/* binding */ inputForm),\n/* harmony export */   removeTask: () => (/* binding */ removeTask),\n/* harmony export */   saveTasks: () => (/* binding */ saveTasks),\n/* harmony export */   showTasks: () => (/* binding */ showTasks),\n/* harmony export */   tasks: () => (/* binding */ tasks),\n/* harmony export */   tasksForm: () => (/* binding */ tasksForm),\n/* harmony export */   updateIndexes: () => (/* binding */ updateIndexes)\n/* harmony export */ });\n// Retrieve books from local storage if available\n\nconst tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n\n// Function to save books to local storage\nconst saveTasks = () => {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n};\n// Defining a class for Book\nclass Task {\n  constructor(description, completed, index) {\n    this.description = description;\n    this.completed = completed;\n    this.index = index;\n  }\n\n  static addTasks(description, completed, index) {\n    const task = new Task(description, completed, index);\n    tasks.push(task);\n    updateIndexes();\n    saveTasks();\n  }\n\n  static removeTask(index) {\n    // if (index < 1 || index > tasks.length) {\n    //   return;\n    // }\n    tasks.splice(index - 1, 1);\n    // Save the books to local storage\n    updateIndexes();\n    saveTasks();\n  }\n}\nconst updateIndexes = () => {\n  tasks.forEach((task, index) => {\n    task.index = index + 1;\n  });\n};\nconst parent = document.body;\n\nconst headerText = document.createElement('h3');\nheaderText.innerHTML = \"Today's To Do\";\nparent.insertBefore(headerText, parent.children[0]);\n\nconst tasksForm = document.createElement('form');\ntasksForm.setAttribute('id', 'form');\n\nparent.insertBefore(tasksForm, parent.children[1]);\n\nconst inputForm = document.createElement('input');\ninputForm.setAttribute('id', 'input-form');\ninputForm.setAttribute('placeholder', 'Add to your list...');\ntasksForm.appendChild(inputForm);\n\nconst formButton = document.createElement('button');\nformButton.setAttribute('type', 'submit');\nformButton.setAttribute('class', 'form-input-button');\nformButton.innerHTML = 'add task';\ntasksForm.appendChild(formButton);\n\nconst hr1 = document.createElement('hr');\ntasksForm.appendChild(hr1);\n\nconst addTasks = (event) => {\n  event.preventDefault();\n  // Getting the input values against variables\n  const title = inputForm.value;\n\n  // Add book using the Book class method\n  Task.addTasks(title, false); // Updated to pass 'false' for the 'completed' parameter\n\n  // Clearing the input values after the user clicks the add button\n  inputForm.value = '';\n\n  // Update the books list\n  // eslint-disable-next-line no-use-before-define\n  showTasks();\n};\n\nconst removeTask = (index) => {\n  Task.removeTask(index);\n  showTasks();\n};\n\n// Function to display the books in the list\nconst showTasks = () => {\n  const taskList = document.getElementById('todo-list');\n  taskList.innerHTML = '';\n\n  for (let i = 0; i < tasks.length; i++) {\n    const task = tasks[i];\n    const tasksDiv = document.createElement('div');\n    tasksDiv.setAttribute('class', 'tasks-div');\n\n    const inputCheckBox = document.createElement('input');\n    inputCheckBox.setAttribute('type', 'checkbox');\n    inputCheckBox.setAttribute('data-index', task.index); // Use task.index instead of i\n    inputCheckBox.classList.add('checkbox'); // Add a class for styling\n    inputCheckBox.id = 'checkbox';\n\n    if (task.completed) {\n      inputCheckBox.checked = true;\n    }\n    inputCheckBox.addEventListener('change', () => {\n      task.completed = inputCheckBox.checked;\n      saveTasks();\n      showTasks();\n    });\n\n    tasksDiv.appendChild(inputCheckBox);\n\n    const listItemTitle = document.createElement('p');\n    listItemTitle.innerHTML = `${task.description}`;\n    tasksDiv.appendChild(listItemTitle);\n\n    const removeButton = document.createElement('span');\n    removeButton.setAttribute('class', 'close');\n    removeButton.setAttribute('id', 'remove-icon');\n    removeButton.innerHTML = 'ðŸ—‘';\n    removeButton.addEventListener('click', () => {\n      taskList.removeChild(tasksDiv);\n      taskList.removeChild(hr3);\n      removeTask(task.index);\n      saveTasks();\n      showTasks();\n    });\n    removeButton.style.display = task.completed ? 'inline' : 'none';\n    tasksDiv.appendChild(removeButton);\n\n    const handle = document.createElement('span');\n    handle.setAttribute('class', 'handle');\n    handle.innerHTML = '&#8942;';\n    tasksDiv.appendChild(handle);\n    handle.style.display = task.completed ? 'none' : 'inline';\n\n    listItemTitle.addEventListener('click', () => {\n      listItemTitle.contentEditable = true;\n      listItemTitle.focus();\n    });\n\n    listItemTitle.addEventListener('blur', () => {\n      listItemTitle.contentEditable = false;\n      tasks[i].description = listItemTitle.innerHTML;\n      saveTasks();\n    });\n\n    taskList.appendChild(tasksDiv);\n    const hr3 = document.createElement('hr');\n    taskList.appendChild(hr3);\n\n    // Update the text decoration style based on the checkbox state\n    if (inputCheckBox.checked) {\n      listItemTitle.style.textDecoration = 'line-through';\n    } else {\n      listItemTitle.style.textDecoration = 'none';\n    }\n  }\n  const clearCompletedButton = document.createElement('button');\n  clearCompletedButton.setAttribute('class', 'clear-button');\n  clearCompletedButton.textContent = 'Clear All Completed';\n  clearCompletedButton.addEventListener('click', () => {\n    const filteredTasks = tasks.filter((task) => {\n      return !task.completed;\n    });\n\n    tasks = filteredTasks;\n    saveTasks();\n    showTasks();\n  });\n  taskList.appendChild(clearCompletedButton);\n};\n\n// Add event listener to the form submission\ntasksForm.addEventListener('submit', addTasks);\ntasksForm.addEventListener('submit', showTasks);\nshowTasks();\n\n\n//# sourceURL=webpack://myday-todo/./src/modules/elements.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/modules/elements.js"));
/******/ }
]);