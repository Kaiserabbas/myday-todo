"use strict";(self.webpackChunkmyday_todo=self.webpackChunkmyday_todo||[]).push([[179],{766:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,'body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n#app {\n    max-width: 600px;\n    margin: 40px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\ninput[type="text"] {\n    width: 100%;\n    padding: 10px;\n    font-size: 16px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    margin-bottom: 20px;\n}\n\nbutton {\n    padding: 10px 20px;\n    font-size: 16px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n#taskList {\n    margin-top: 20px;\n}\n\n.task {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.task input[type="checkbox"] {\n    margin-right: 10px;\n}\n\n.task button {\n    margin-left: auto;\n    font-size: 18px;\n    padding: 6px 10px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\n.handle {\n        margin-left: auto;\n            font-size: 18px;\n            padding: 6px 10px;\n            border: none;\n            background-color: transparent;\n            cursor: pointer;\n}\n\n.task button:hover {\n    color: #ff0000;\n}',"",{version:3,sources:["webpack://./src/modules/style.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,SAAS;IACT,UAAU;AACd;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,0CAA0C;AAC9C;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,eAAe;IACf,sBAAsB;IACtB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,yBAAyB;IACzB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,eAAe;AACnB;;AAEA;QACQ,iBAAiB;YACb,eAAe;YACf,iBAAiB;YACjB,YAAY;YACZ,6BAA6B;YAC7B,eAAe;AAC3B;;AAEA;IACI,cAAc;AAClB",sourcesContent:['body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n#app {\n    max-width: 600px;\n    margin: 40px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\ninput[type="text"] {\n    width: 100%;\n    padding: 10px;\n    font-size: 16px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    margin-bottom: 20px;\n}\n\nbutton {\n    padding: 10px 20px;\n    font-size: 16px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n#taskList {\n    margin-top: 20px;\n}\n\n.task {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.task input[type="checkbox"] {\n    margin-right: 10px;\n}\n\n.task button {\n    margin-left: auto;\n    font-size: 18px;\n    padding: 6px 10px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\n.handle {\n        margin-left: auto;\n            font-size: 18px;\n            padding: 6px 10px;\n            border: none;\n            background-color: transparent;\n            cursor: pointer;\n}\n\n.task button:hover {\n    color: #ff0000;\n}'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var p=[].concat(n[A]);r&&i[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),t.push(p))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],p=a[A]||0,d="".concat(A," ").concat(p);a[A]=p+1;var u=e(d),l={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(l);else{var f=o(l,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);t[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var p=e(a[A]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},271:(n,t,e)=>{var r=e(379),o=e.n(r),a=e(795),i=e.n(a),s=e(569),c=e.n(s),A=e(565),p=e.n(A),d=e(216),u=e.n(d),l=e(589),f=e.n(l),m=e(766),g={};g.styleTagTransform=f(),g.setAttributes=p(),g.insert=c().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;let x=(()=>{try{const n=localStorage.getItem("tasks");return n?JSON.parse(n):[]}catch(n){return console.error("Error while retrieving tasks from local storage:",n),[]}})()||[];const b=()=>{(n=>{try{const t=JSON.stringify(n);localStorage.setItem("tasks",t)}catch(n){console.error("Error while saving tasks to local storage:",n)}})(x)},B=()=>{const n=document.getElementById("taskList");n.innerHTML="",x.forEach(((t,e)=>{const r=((n,t)=>{const e=document.createElement("div");e.classList.add("task"),e.draggable=!0;const r=document.createElement("input");r.type="checkbox",r.checked=n.status,r.addEventListener("change",(()=>C(t)));const o=document.createElement("span");o.textContent=n.description,n.status&&(o.style.textDecoration="line-through"),o.addEventListener("click",(()=>{o.contentEditable=!0,o.focus()})),o.addEventListener("blur",(()=>{o.contentEditable=!1,n.description=o.innerHTML,b()}));const a=document.createElement("span");a.setAttribute("class","handle"),a.innerHTML="&#8942;",a.style.display=n.status?"none":"inline";const i=document.createElement("button");return i.textContent="🗑️",i.style.display=n.status?"inline":"none",i.addEventListener("click",(()=>h(t))),e.appendChild(r),e.appendChild(o),e.appendChild(a),e.appendChild(i),e})(t,e);n.appendChild(r)}))},C=n=>{n>=0&&n<x.length&&(x[n].status=!x[n].status,b(),B())},h=n=>{n>=0&&n<x.length&&x[n].status&&(x.splice(n,1),x.forEach(((n,t)=>{n.index=t})),b(),B())};document.getElementById("newTaskInput").addEventListener("keypress",(n=>{if("Enter"===n.key){n.preventDefault();const t=n.target.value.trim();""!==t&&((n=>{const t={description:n,status:!1};t.index=x.length,x.push(t),b(),B()})(t),n.target.value="")}})),document.getElementById("clearCompletedBtn").addEventListener("click",(()=>{x=x.filter((n=>!n.status)),x.forEach(((n,t)=>{n.index=t})),b(),B()})),B()}},n=>{n(n.s=271)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,