"use strict";(self.webpackChunkmyday_todo=self.webpackChunkmyday_todo||[]).push([[179],{766:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([n.id,'body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n#app {\n    max-width: 600px;\n    margin: 40px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n#newTaskInput {\n  border: none;\n  width: 100%;\n  height: 35px;\n}\n\n#newTaskInput:focus {\n    outline: none;\n}\nbutton {\n    padding: 10px 20px;\n    font-size: 16px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n#taskList {\n    margin-top: 20px;\n}\n\n.task {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.task input[type="checkbox"] {\n    margin-right: 10px;\n}\n\n.task button {\n    margin-left: auto;\n    font-size: 18px;\n    padding: 6px 10px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n}\n\n.handle {\n  margin-left: auto;\n  font-size: 18px;\n  padding: 6px 10px;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.task button:hover {\n    color: #ff0000;\n}',"",{version:3,sources:["webpack://./src/modules/style.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,SAAS;IACT,UAAU;AACd;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,0CAA0C;AAC9C;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,YAAY;AACd;;AAEA;IACI,aAAa;AACjB;AACA;IACI,kBAAkB;IAClB,eAAe;IACf,yBAAyB;IACzB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,eAAe;AACnB;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,iBAAiB;EACjB,YAAY;EACZ,6BAA6B;EAC7B,eAAe;AACjB;;AAEA;IACI,cAAc;AAClB",sourcesContent:['body {\r\n    font-family: Arial, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n#app {\r\n    max-width: 600px;\r\n    margin: 40px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh1 {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n#newTaskInput {\r\n  border: none;\r\n  width: 100%;\r\n  height: 35px;\r\n}\r\n\r\n#newTaskInput:focus {\r\n    outline: none;\r\n}\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n    background-color: #0056b3;\r\n}\r\n\r\n#taskList {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.task input[type="checkbox"] {\r\n    margin-right: 10px;\r\n}\r\n\r\n.task button {\r\n    margin-left: auto;\r\n    font-size: 18px;\r\n    padding: 6px 10px;\r\n    border: none;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n}\r\n\r\n.handle {\r\n  margin-left: auto;\r\n  font-size: 18px;\r\n  padding: 6px 10px;\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n}\r\n\r\n.task button:hover {\r\n    color: #ff0000;\r\n}'],sourceRoot:""}]);const i=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var A=0;A<n.length;A++){var p=[].concat(n[A]);r&&s[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),e.push(p))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],A=r.base?c[0]+r.base:c[0],p=a[A]||0,d="".concat(A," ").concat(p);a[A]=p+1;var l=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)e[l].references++,e[l].updater(u);else{var f=o(u,r);r.byIndex=i,e.splice(i,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var c=r(n,o),A=0;A<a.length;A++){var p=t(a[A]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},271:(n,e,t)=>{var r=t(379),o=t.n(r),a=t(795),s=t.n(a),i=t(569),c=t.n(i),A=t(565),p=t.n(A),d=t(216),l=t.n(d),u=t(589),f=t.n(u),m=t(766),g={};g.styleTagTransform=f(),g.setAttributes=p(),g.insert=c().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=l(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;let h=(()=>{try{const n=localStorage.getItem("tasks");return n?JSON.parse(n):[]}catch(n){return console.error("Error while retrieving tasks from local storage:",n),[]}})()||[];const C=()=>{(n=>{try{const e=JSON.stringify(n);localStorage.setItem("tasks",e)}catch(n){console.error("Error while saving tasks to local storage:",n)}})(h)},b=()=>{const n=document.getElementById("taskList");n.innerHTML="";let e=!1;h.forEach(((t,r)=>{const o=((n,e)=>{const t=document.createElement("div");t.classList.add("task"),t.draggable=!0;const r=document.createElement("input");r.type="checkbox",r.checked=n.status,r.addEventListener("change",(()=>x(e)));const o=document.createElement("span");o.textContent=n.description,n.status&&(o.style.textDecoration="line-through"),o.addEventListener("click",(()=>{o.contentEditable=!0,o.focus()})),o.addEventListener("blur",(()=>{o.contentEditable=!1,n.description=o.innerHTML,C()}));const a=document.createElement("span");a.setAttribute("class","handle"),a.innerHTML="&#8942;",a.style.display=n.status?"none":"inline";const s=document.createElement("button");return s.textContent="🗑️",s.style.display=n.status?"inline":"none",s.addEventListener("click",(()=>B(e))),t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(s),t})(t,r),a=document.createElement("hr");o.style.backgroundColor=e?"#f2f2f2":"white",e=!e,n.appendChild(o),n.appendChild(a)}))},x=n=>{n>=0&&n<h.length&&(h[n].status=!h[n].status,C(),b())},B=n=>{n>=0&&n<h.length&&h[n].status&&(h.splice(n,1),h.forEach(((n,e)=>{n.index=e})),C(),b())};document.getElementById("newTaskInput").addEventListener("keypress",(n=>{if("Enter"===n.key){n.preventDefault();const e=n.target.value.trim();""!==e&&((n=>{const e={description:n,status:!1};e.index=h.length,h.push(e),C(),b()})(e),n.target.value="")}})),document.getElementById("clearCompletedBtn").addEventListener("click",(()=>{h=h.filter((n=>!n.status)),h.forEach(((n,e)=>{n.index=e})),C(),b()}));const v=document.getElementById("selectAllBtn");v.addEventListener("click",(()=>{h.every((n=>n.status))?(h.forEach((n=>n.status=!1)),v.textContent="Select All"):(h.forEach((n=>n.status=!0)),v.textContent="Select None"),C(),b()})),b()}},n=>{n(n.s=271)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,